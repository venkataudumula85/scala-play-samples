/* uses sbt, which i installed with homebrew. */
/* this works without requiring the 'sbt plugin'. */

pipeline {
  agent any
  environment {
    SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
    VERSION = "1.0.$SHORT_COMMIT"
    scannerHome = tool 'SonarScanner'
    SONAR_SCANNER_OPTS="-Dproject.settings=./sonar-project.properties"

  }
  stages {
    stage("ENV SETUP") {
      steps {
        script {
          if ( "release" in "${GIT_BRANCH}") {
            SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
            VERSION = "1.0.$SHORT_COMMIT-release"
            RPM_VERSION = "1.0.$SHORT_COMMIT"
            BuildType = "release"
          }
          else {
            SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
            VERSION = "1.0.$SHORT_COMMIT-snapshot"
             RPM_VERSION = "1.0.$SHORT_COMMIT"
            BuildType = "snapshot"
          }
        }
      }
    }
    stage('Compile') {
      steps {
        dir('play-scala-forms-example') {
          echo "Compiling..."
          echo "$VERSION"
          echo "$GIT_BRANCH"
          sh "sbt sbtVersion"
          // sh "sbt sonarScan"
          //sh "sbt playGenerateSecret"
          sh "sbt playUpdateSecret"

        }
      }
    }
   
    stage('Unit Test') {
      steps {
        dir('play-scala-forms-example') {
          echo "Testing..."
          sh "sbt clean coverage test"
          sh "sbt coverageReport"
          
        }
      }
    }
 stage('SonarQube analysis') {
      steps {
        dir('play-scala-forms-example') {

          withSonarQubeEnv('SonarQube') { // If you have configured more than one global server connection, you can specify its name
            //sh "sbt sonarScan"
            sh "${scannerHome}/bin/sonar-scanner -Dproject.settings=./sonar-project.properties"
          }
        }
      }
    }
    stage('Package') {
      steps {

        echo "Packaging..."
        sh "cd play-scala-forms-example && sbt rpm:packageBin"
      }
    }
    stage('Artifacts Upload') {
      steps {
        nexusArtifactUploader artifacts: [[artifactId: 'rpm-snapshot', classifier: '', file: "play-scala-forms-example/target/rpm/RPMS/noarch/play-scala-forms-example-${RPM_VERSION}-1.noarch.rpm", type: 'rpm']],
        credentialsId: 'nexus-password',
        groupId: 'scala',
        nexusUrl: '3.139.194.242:8081',
        nexusVersion: 'nexus3',
        protocol: 'http',
        repository: 'rpm-snapshot',
        version: "{$BuildType}"
      }
    }
    stage('Docker Build') {
      steps {
        withDockerRegistry(credentialsId: 'nexus-password', url: 'http://3.139.194.242:8083') {
          sh "cd play-scala-forms-example && docker build -t 3.139.194.242:8083/play-scala-forms-example:$VERSION ."
        }
      }
    }
    stage('Docker Upload') {
      steps {
        withDockerRegistry(credentialsId: 'nexus-password', url: 'http://3.139.194.242:8083') {
          sh "docker push 3.139.194.242:8083/play-scala-forms-example:$VERSION"
        }
      }
    }
  }

}
